# TestMozart Multi-Language Testing Guide

## üêç Python Testing Commands

### Step 1: Generate Python Tests
1. Set TEST_FILE_PATH = "sample_code.py" in main.py
2. Run: python main.py
3. This generates: final_test_suite.py

### Step 2: Run Python Tests
```bash
# Install pytest if not already installed
pip install pytest

# Run the generated Python tests
pytest -v final_test_suite.py

# Alternative: Run with more detailed output
pytest -v -s final_test_suite.py

# Run with coverage (optional)
pytest -v --cov=final_test_suite.py
```

### Step 3: Expected Python Output
- Test results showing PASS/FAIL
- Detailed test execution log
- Coverage information (if using --cov)

---

## üîß C Testing Commands

### Step 0: Setup C Dependencies (AUTOMATIC)
```bash
# Run the Python setup script (works on all platforms)
python setup_c.py

# If automatic setup fails, manual setup:
# 1. Install gcc compiler:
#    - Windows: Download MinGW-w64 or use chocolatey: choco install mingw
#    - Linux: sudo apt-get install gcc (Ubuntu/Debian) or sudo yum install gcc (CentOS)
#    - macOS: brew install gcc
# 2. No Unity framework needed! Simple C tests only.
```

### Step 0.5: Google Cloud Setup (For Google Cloud Shell)
```bash
# Set up authentication and quota project
gcloud auth application-default login
gcloud auth application-default set-quota-project YOUR_PROJECT_ID

# Enable necessary APIs
gcloud services enable aiplatform.googleapis.com
gcloud services enable generativelanguage.googleapis.com

# Set environment variables
export GOOGLE_GENAI_USE_VERTEXAI=1
export GOOGLE_CLOUD_PROJECT=YOUR_PROJECT_ID
export GOOGLE_CLOUD_LOCATION=us-central1
```

### Step 1: Generate C Tests
1. Set TEST_FILE_PATH = "sample_code.c" in main.py
2. Run: python main.py
3. This generates: final_test_suite.c

### Step 2: Verify Setup
```bash
# Check if gcc is available
gcc --version

# Check if Unity framework is available
ls unity/  # Should show unity.h and other files

# Test compilation (optional)
gcc -c sample_code.c -o sample_code.o
echo "‚úÖ C compilation test successful"
```

### Step 3: Compile and Run C Tests
```bash
# Simple compilation (no Unity framework needed!)
gcc -o test_runner final_test_suite.c -std=c99

# Run the C tests
./test_runner

# On Windows (if using MinGW or similar):
# test_runner.exe
```

### Step 5: Expected C Output
```
üß™ Running C Tests...
====================

‚úÖ PASS: add(5, 7) should return 12
‚úÖ PASS: multiply(3, 4) should return 12
‚ùå FAIL: greet('World') should return 'Hello, World' (expected 'Hello, World', got 'Hello, World')

====================
üìä Test Results:
‚úÖ Passed: 2
‚ùå Failed: 1
üìà Total: 3
üí• Some tests failed!
```

---

## üîÑ Quick Testing Workflow

### For Python:
1. Change TEST_FILE_PATH = "sample_code.py"
2. python main.py
3. pytest -v final_test_suite.py

### For C:
1. **Setup**: python setup_c.py (one-time setup)
2. Change TEST_FILE_PATH = "sample_code.c" in main.py
3. python main.py
4. gcc -o test_runner final_test_suite.c -std=c99
5. ./test_runner

---

## üõ†Ô∏è Troubleshooting

### Python Issues:
- Make sure pytest is installed: `pip install pytest`
- Check that final_test_suite.py was generated
- Verify imports are correct

### C Issues:
- Make sure gcc is installed and in PATH: `gcc --version`
- Verify that final_test_suite.c was generated
- Ensure proper C compilation flags: `-std=c99`

### Google Cloud Issues:
- Make sure you're authenticated: `gcloud auth application-default login`
- Set quota project: `gcloud auth application-default set-quota-project YOUR_PROJECT_ID`
- Enable APIs: `gcloud services enable aiplatform.googleapis.com`
- Check environment variables: `echo $GOOGLE_CLOUD_PROJECT`

### General Issues:
- Check that the source file exists (sample_code.py or sample_code.c)
- Verify the TEST_FILE_PATH is set correctly in main.py
- Make sure all dependencies are installed: `pip install -r requirements.txt`

### Setup Issues:
- If Python setup script fails, try manual setup
- On Windows: Install MinGW-w64 or use WSL
- On Linux: Use package manager (apt, yum, dnf)
- On macOS: Use homebrew: `brew install gcc`

---

## üîß Manual Testing (If Needed)

If the automatic test execution fails or you want to run tests manually, you can use the generated test files directly:

### For Python Tests:
```bash
# Run the generated Python tests manually
pytest -v final_test_suite.py

# Or run with more detailed output
pytest -v -s final_test_suite.py

# Run with coverage
pytest -v --cov=final_test_suite.py
```

### For C Tests:
```bash
# Compile the generated C tests manually
gcc -o test_runner final_test_suite.c -std=c99

# Run the compiled tests
./test_runner

# On Windows:
# test_runner.exe
```

### Debugging Generated Tests:
```bash
# Check if the test file was generated
ls -la final_test_suite.*

# View the generated test content
cat final_test_suite.py    # For Python
cat final_test_suite.c     # For C

# Test compilation manually
gcc -c final_test_suite.c -std=c99    # Test C compilation
python -m py_compile final_test_suite.py  # Test Python syntax
```

---

## üìù Notes

- Python tests use pytest framework
- C tests use simple C assertions (no Unity framework needed)
- Both generate appropriate test files based on language
- The system automatically detects language and generates appropriate tests
- Test files are saved as final_test_suite.py or final_test_suite.c
- Automatic test execution runs after generation
